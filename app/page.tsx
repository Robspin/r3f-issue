'use client'
import * as THREE from 'three'
import { forwardRef, useEffect, useState } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { useGLTF, ScrollControls, useScroll, useTexture } from '@react-three/drei'
import useRefs from 'react-use-refs'

export default function App() {
  return (
      <Canvas shadows dpr={[1, 2]} camera={{ position: [0, -3.2, 40], fov: 12 }}>
        <ScrollControls pages={5}>
          <Composition />
        </ScrollControls>
      </Canvas>
  )
}

function Composition({ ...props }) {
  const scroll = useScroll()
  const { width, height } = useThree((state) => state.viewport)
  const [group, mbp16, mbp14, keyLight, stripLight, fillLight, left, right] = useRefs()
  const [vscode1, vscode2] = useTexture(['/vscode1.png', '/vscode2.png'])
  const [currentTexture, setCurrentTexture] = useState(vscode1)


  useFrame((state, delta) => {
    const r1 = scroll.range(0 / 4, 1 / 4)
    const r2 = scroll.range(1 / 4, 1 / 4)
    const r3 = scroll.visible(4 / 5, 1 / 5)

    mbp16.current.rotation.x = Math.PI - (Math.PI / 2) * 0.96 + r2 * 0.33
    keyLight.current.position.set(0.25 + -15 * (1 - r1), 4 + 11 * (1 - r1), 3 + 2 * (1 - r1))
  })

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTexture((prev) => (prev === vscode1 ? vscode2 : vscode1))
    }, 2000)
    return () => clearInterval(interval)
  }, [])

  return (
      <>
        <spotLight position={[0, -width * 0.7, 0]} intensity={0.5} />
        <directionalLight ref={keyLight} castShadow intensity={6}>
          <orthographicCamera attachObject={['shadow', 'camera']} args={[-10, 10, 10, -10, 0.5, 30]} />
        </directionalLight>
        <group ref={group} position={[0, -height / 2.65, 0]} {...props}>
          <spotLight ref={stripLight} position={[width * 2.5, 0, width]} angle={0.19} penumbra={1} intensity={0.25} />
          <spotLight ref={fillLight} position={[0, -width / 2.4, -width * 2.2]} angle={0.2} penumbra={1} intensity={2} distance={width * 3} />
          <M1 ref={mbp16} texture={currentTexture} scale={width / 67} />
        </group>
      </>
  )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: akshatmittal (https://sketchfab.com/akshatmittal)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/2021-macbook-pro-14-m1-pro-m1-max-f6b0b940fb6a4286b18a674ef32af2d3
title: 2021 Macbook Pro 14" (M1 Pro / M1 Max)
*/
const M1 = forwardRef(({ texture, children, ...props }, ref) => {
  const { nodes, materials } = useGLTF('/mbp-v1-pipe.glb')
  return (
      <group {...props} dispose={null}>
        <group ref={ref} position={[0, -0.43, -11.35]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.back_1.geometry} material={materials.blackmatte} />
          <mesh receiveShadow castShadow geometry={nodes.back_2.geometry} material={materials.aluminium} />
          <mesh geometry={nodes.matte.geometry}>
            <meshLambertMaterial map={texture} toneMapped={false} colorSpace={THREE.SRGBColorSpace} />
          </mesh>
        </group>
        {children}
        <mesh geometry={nodes.body_1.geometry} material={materials.aluminium} material-color="#aaaaaf" material-envMapIntensity={0.2} />
        <mesh geometry={nodes.body_2.geometry} material={materials.blackmatte} />
      </group>
  )
})
